# -*- coding: utf-8 -*-
#
# Copyright (c) 2013 Clione Software
# Copyright (c) 2010-2013 Cidadania S. Coop. Galega
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
Proposal forms.
"""


from django.forms import ModelForm
from django import forms
from django.core import validators
from django.contrib.auth.models import User
from django.shortcuts import get_object_or_404

from apps.ecidadania.proposals.models import Proposal, ProposalSet, ProposalField
from apps.ecidadania.debate.models import Debate
from core.spaces.models import Space

import datetime


class ProposalSetForm(ModelForm):

    """
    ProposalSetForm is a basic form autogenerated form from ProposalSet model.
    Returns an empty form to create a new proposal set. The debate field is
    filtered based on the closed debates and the current space.

    :rtype: HTML Form

    .. versionadded:: 0.1.5b
    """
    class Meta:
        model = ProposalSet

    def __init__(self, *args, **kwargs):
        super(ProposalSetForm, self).__init__(*args, **kwargs)
        get_place = get_object_or_404(Space, url=kwargs['initial']['space'])
        if self.instance:
            self.fields['debate'].queryset = Debate.objects.filter(end_date__lte=datetime.date.today(), space=get_place)


class ProposalForm(ModelForm):

    """
    ProposalForm is a basic form autogenerated form for Proposal model.
    Returns an empty form for creating a new proposal.

    :rtype: HTML Form

    .. versionadded:: 0.1.5b
    """
    class Meta:
        model = Proposal
        exclude = ('contenttype', 'object_pk', 'content_object')


class ProposalFormInSet(ModelForm):

    """
    """
    class Meta:
        model = Proposal
        exclude = ('contenttype', 'object_pk', 'content_object')


class ProposalMergeForm(ModelForm):

    """
    Returns a proposal form to create merged proposal. This form has a merged proposals \
    field which is initialized with list the proposals of a particular proposal set.

    :rtype: HTML Form

    .. versionadded:: 0.1.5b
    """

    class Meta:
        model = Proposal
        exclude = ('contenttype', 'object_pk', 'content_object')

    def __init__(self, *args, **kwargs):
        if len(kwargs) > 0:
            p_set = kwargs['initial']['set_id']
            print "form - set id: " + p_set
            super(ProposalMergeForm, self).__init__(*args, **kwargs)
            if self.instance:
                # self.fields['merged_proposals'].widget = forms.SelectMultiple()
                print Proposal.objects.filter(proposalset=p_set)
                self.fields['merged_proposals'].queryset = Proposal.objects.filter(proposalset=p_set)


class VoteProposal(ModelForm):

    """
    aswd
    """
    class Meta:
        model = Proposal
        exclude = ('code', 'title', 'description', 'space', 'author', 'tags',
                   'latitude', 'longitude', 'closed', 'closed_by',
                   'close_reason', 'anon_allowed', 'refurbished', 'budget',
                   'pub_date', 'mod_date', 'content_type', 'object_pk',
                   'content_object')


class ProposalFieldForm(ModelForm):

    """
    ProposalFieldForm is a basic form autogenerated from ProposalField model. Returns a form \
    with two dropdown box which list the proposal set and optional fields.

    rtype: HTML Form

    .. versionadded:: 0.1.5b
    """

    class Meta:
        model = ProposalField

    def clean(self):
        cleaned_data = super(ProposalFieldForm, self).clean()
        field_set = []
        p_set = cleaned_data.get("proposalset")
        f_name = cleaned_data.get("field_name")
        proposal_sets = ProposalField.objects.filter(proposalset=p_set)
        for p in proposal_sets:
            field_set.append(p.field_name)
        if f_name in field_set:
            raise forms.ValidationError("This Field has be already added")
        else:
            return cleaned_data


class ProposalFieldDeleteForm(ModelForm):

    """
    ProposalFieldDeleteForm is a basic form autogenerated from ProposalField model. Returns a form \
    with two dropdown boxs which list the proposal set and optional fields.

    rtype: HTML Form

    .. versionadded:: 0.1.5b
    """

    class Meta:
        model = ProposalField


class ProposalSetSelectForm(ModelForm):

    """
    ProposalSetSelectForm is a basic form autogenerated from ProposalField model. Return a form \
    which list the proposal sets.

    rtype: HTML Form

    .. versionadded:: 0.1.5b
    """

    class Meta:
        model = ProposalField
        exclude = ('field_name')
